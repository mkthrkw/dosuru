// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?   @db.Text
  image         String?
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Project {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  image       String?   @db.Text
  order       Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  lists       List[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@map("projects")
}

model List {
    id         String    @id @default(cuid())
    title      String
    color      String    @default("#8c8c8c")
    order      Int       @default(0)
    projectId  String
    project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    tickets    Ticket[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([projectId])
}

model Ticket {
    id          String    @id @default(cuid())
    title       String
    description String?   @db.Text
    completed   Boolean   @default(false)
    startAt     DateTime?
    endAt       DateTime?
    order       Int       @default(0)
    displayId   Int       @default(0)
    listId      String
    list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
    comments    Comment[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([listId])
}

model Comment {
    id         String    @id @default(cuid())
    text       String    @db.Text
    ticketId   String
    ticket     Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([ticketId])
}